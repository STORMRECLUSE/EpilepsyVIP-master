//
// Created by Victor Prieto on 14.03.16.
//
#include "epilserv.h"


#define BUFFERSIZE 32
#define WINDOWSIZE window
#define CHANSIZE chans

int window;
int chans;


//epilserv.c EVM Server for Data Transfer
//Copyright 2015, Erik Biegert, All rights reserved.

/* Function ERROR
    Throws some errors.
    Check perror man page
    'man perror' in terminal */
void error(const char *msg)
{
    perror(msg);
    exit(1);
}

/* Function CHECKYES
    Asks user a y/n question based on input
    string msg. Returns 1 or 0 */
int checkyes(char msg[])
{
    char ans;
    while(1) {
        printf("%s (y/n) ", msg);
        scanf("%c", &ans);
        if (ans == 'y')
            return 1;
        if (ans == 'n')
            return 0;
    }
}


/* Function PRINTFILE
    Reads the file that was saved
    at the end of function f
    This function is unused, but is a working example
    of how to read an array from a file */
int printfile(char *filename)
{
    int i;
    FILE *fp = fopen(filename, "r");
    double win[WINDOWSIZE];
    fread(win, sizeof(double), WINDOWSIZE, fp);
    for (i = 0; i < WINDOWSIZE; i++) {
        printf("%lf ", win[i]);
    }
    printf("\n");
    fclose(fp);
    return 1;
}

/* Function STARTSERV
    Starts the server with input 'portno' waiting for a client to connect*/
int startserv(int portno){
    /*-------Server Hosting Stuff-------*/
    //Open a socket
    int sockfd, newsockfd;

    struct sockaddr_in serv_addr, cli_addr;
    socklen_t clilen;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd 	< 0)
        error("ERROR opening socket\n");

    //Sets values in buffer to 0
    //for more information, 'man bzero' in terminal
    bzero((char *) &serv_addr, sizeof(serv_addr));

    serv_addr.sin_family = AF_INET; //sets the >A<ddress >F<amily
    serv_addr.sin_addr.s_addr = INADDR_ANY; //grabs the IP address of host
    serv_addr.sin_port = htons(portno); //sets port number, must convert using htons

    //bind the socket
    if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
        error("ERROR binding socket!\n");

    printf("Server established! Waiting for client to connect...\n");
    //listen for connections
    listen(sockfd, 5);

    //accepting a connection
    clilen = sizeof(cli_addr);
    newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
    if (newsockfd < 0)
        error("ERROR accepting client\n");
    printf("Client Connected!\n");
    return newsockfd;
}

int ReadXBytes(int socket, unsigned int x, void* buffer)
{
    int bytesRead = 0;
    int result;
    while (bytesRead < x)
    {
        result = read(socket,((char*) buffer) + bytesRead, x - bytesRead);
        if (result < 1 )
        {
            // Throw your error.
        }

        bytesRead += result;
    }
    return 1;
}

/* Function send_array
 * Given an open socket, a buffersize, and a data array, send a c++ array structure
 *
 */


/*Function FILLDATA
 * Given a socket, buffer, and data array, receive data until the first window is full
 */
void filldata(int newsockfd,double* buffer, sliding_array <double> data) {
    //IGNORE FIRST 5 SECONDS OF DATA (since it is mostly zeros)
    //ALLOW THE WINDOW TO FILL UP
    int rowcount=0, timecount=0, flag = 0;
    while (1) {
        ReadXBytes(newsockfd, BUFFERSIZE * sizeof(double), buffer);
        for (int i = 0; i < BUFFERSIZE; i++) {
            //write incoming buffer to data
            data[rowcount] [timecount] = buffer[i];
            rowcount++; //go to next channel
            if (rowcount == CHANSIZE) { //at max channel, go back to channel 0
                timecount++;//go to next column
                rowcount = 0;
                if (!(timecount % 1000)) //DEBUG
                    printf("%d\n", timecount); //DEBUG
                if (timecount == WINDOWSIZE) {
                    printf("BOOM\n"); //DEBUG
                    flag = 1;
                    break;

                }
            }

        }
        if (flag == 1)
            break;
    }
}

/* Function RXDATA
 * Takes newsockfd, buffer[BUFFERISZE], sliding array class, and an offsettime
 * Returns 1 if it has received a timecounts worth of data
 * Returns -1 if data transfer is totally complete (signaled by a buffer of 666's)
 * */
int rxdata(int newsockfd, double* buffer, sliding_array <double> data,int offsettime) {
    //while loop of server reading data that is being streamed to buffer
    //While loop for receiving data. Fills buffer of size BUFFERSIZE and then
    int flag = 0, rowcount = 0,n;
    ReadXBytes(newsockfd, BUFFERSIZE * sizeof(double), buffer);
    for (int i = 0; i < BUFFERSIZE; i++) {
        //printf("%f ", buffer[i]);
    }
    offsettime = buffer[0];
    int timecount = WINDOWSIZE-offsettime;

    //printf("%d ", offsettime);
    while (1) {
        n = ReadXBytes(newsockfd, BUFFERSIZE * sizeof(double), buffer);
        if (n < 0)
            error("ERROR reading socket\n");
        //check if received all 666's
        //if all 666's are received, we know data transmission has been completed
        for (int i = 0; i < BUFFERSIZE; i++) {
            if (buffer[i] != 666) {
                flag = 1; //flag is 1 if any non-666 is found
                break;
            }
        }
        if (flag == 0) { //flag stays 0 if all 666's are read on socket
            printf("Data Transfer Complete! Writing data back now...\n");
            return -1;
        }
        for (int i = 0; i < BUFFERSIZE; i++) {
            data[rowcount] [timecount] = buffer[i]; //write incoming data to buffer
            rowcount++;
            if (rowcount == CHANSIZE) { //at max channel, go back to channel 0
                timecount++;
                rowcount = 0;
                if (timecount == WINDOWSIZE)
                    return 1;

            }
        }
    }
}


/*Function TXDATA
 *  takes newsockfd, bufferout[BUFFERSIZE], sliding array for outgoing data, binary finaldecision value
 *  and double energystats[3], transmits the stats and then the outgoing data to the client
 * Transmits a buffer of 666's when it is done sending the data
 * */
void txdata(int newsockfd, double* bufferout, sliding_array <double> dataout,double finaldecision, double* energystats) {
//AT THIS POINT WE HAVE RECEIVED ALL DATA, NOW WE SEND BACK THE LAST WINDOW
    int q = 1;
    int k;
    int rowcount = 0;
    int timecount = 0;;//timecount-WINDOWSIZE;
    double bufferin[BUFFERSIZE];
    //memset(bufferout, 0, sizeof(double)*BUFFERSIZE);// NOT HOW YOU DO THIS
    bufferout[0] = finaldecision;
    for (int k = 0; k < 3; k++){
        bufferout[k + 1] = energystats[k]; //very first buffer sends final decision and energy statistics
    }
    bufferout[4] = WINDOWSIZE;
    bufferout[5] = CHANSIZE;
    write(newsockfd, bufferout, BUFFERSIZE * sizeof(double));
    while (q == 1) { //here we start sending back the filtered data, dataout
        //Fills up the buffer of size BUFFERSIZE
        bufferout[0] = rowcount; //first index of buffer is the start row
        bufferout[1] = timecount; //next index of buffer is the start column
        for (k = 0; k < BUFFERSIZE - 2; k++) {
            //bufferout[k+2] = data[rowcount][timecount];
            bufferout[k + 2] = dataout[rowcount][timecount];
            //printf("%f ", bufferout[k+2]);
            timecount++;
            if (timecount == WINDOWSIZE) {
                rowcount++;
                timecount = 0;
                if (rowcount == CHANSIZE) {
                    //printf("Data Send Complete!\n");
                    q = 0;
                    break;
                }
            }
        }
        //when the buffer is full, send the buffer
        write(newsockfd, bufferout, BUFFERSIZE * sizeof(double));
    }

    for (int i = 0; i < 10; i++) {
        bufferout[i] = 666;
    }
    int n = write(newsockfd, bufferout, BUFFERSIZE * sizeof(double));
}



/* Function MAIN
    Server setup and data receiving
    usage: 1 argument (portno) */
int main(int argc, char *argv[])
{
    //initializations
    int sockfd, newsockfd, portno, n, i, j, q, r, k, flag,lastindex = 0, offsettime = 0;
    struct sockaddr_in serv_addr, cli_addr;
    double buffer[BUFFERSIZE], *in;
    double bufferout[BUFFERSIZE], bufferin[BUFFERSIZE];
    //double* filtnum = ComputeNumCoeffs(10);
    //double* filtden = ComputeDenCoeffs(10,100./1000.,500./1000.);
    //double* filtout;
    double weighted_decision;
    //double energystats[3];



    char* model_basename = "model_files/TS041_%d.model";

    char* params_filename = "TS041.params";








    //each row is a channel, columns of width WINDOWSIZE

    //No input error catcher
    if (argc < 3) {
        printf("Usage: portnumber WindowOffsetTime\n");
    }
    offsettime = atoi(argv[2]);
    int WinStep = offsettime;
    portno = atoi(argv[1]); //Grabs port number from input argument
    newsockfd = startserv(portno); //start the server

    ReadXBytes(newsockfd, BUFFERSIZE * sizeof(double), buffer);
    WINDOWSIZE = buffer[1];
    CHANSIZE = buffer[2];

    //fftw_complex *out; //for use of fftw
    //fftw_plan p; //for use of fftw

    // allocate memory for data of CHANSIZE rows and WINDOWSIZE +50 columns
    // (for filtering purposes)
    sliding_array <double> data(CHANSIZE,WINDOWSIZE+ 50);


    // Initialize all other main get_alarm_rate stuff

    // filter stuff
    sliding_array <double> filtered_data(CHANSIZE,WINDOWSIZE);

    // Lcutoff= 0.01 and Ucutoff = 0.1
    int FilterOrder = 5;
    double Lcutoff = .01;
    double Ucutoff = .3;

    double Lstop = 0.0525;
    double Ustop = 0.06;

    double *NumC = ComputeNumCoeffs(FilterOrder);
    double *DenC = ComputeDenCoeffs(FilterOrder, Lcutoff, Ucutoff );
    double scalf = sf_bwbp(FilterOrder, Lcutoff, Ucutoff );

    //TODO: BandStop Filter
//    double *NumC_bs = ccof_bwbs(FilterOrder, Lstop, Ustop);
//    double *DenC_bs = dcof_bwbs(FilterOrder, Lstop, Ustop);
//    double scal_bs = sf_bwbs(FilterOrder, Lstop, Ustop);

    int FiltOrd = 5;

    for(int k = 0; k<2*FiltOrd+1; k++)
    {
        NumC[k] = scalf*NumC[k];
    }

//    for(int k = 0; k<2*FiltOrd+1; k++)
//    {
//        NumC_bs[k] = scal_bs*NumC_bs[k];
//    }

    // DON'T FORGET TO PARALLELIZE THIS LOOP:
    // initialize filter
    // so only the last windowstep values should be computed.
#pragma omp parallel for
    for(int chan = 0;chan < CHANSIZE;chan ++){
        filter_vect(FilterOrder,DenC, NumC,0, WINDOWSIZE-WinStep-1,
                    data[chan], filtered_data[chan]);
//        filter_vect(FilterOrder,DenC_bs, NumC_bs,0, WINDOWSIZE-WinStep-1,
//                    filtered_data[chan], filtered_data[chan]);
    }
    //printf("Done Filtering-- First Batch\n");


    //energy_features
    //int length;

    double **en_stat = new double*[CHANSIZE];
    en_stat[0] = new double[3*CHANSIZE];
    for(int chan = 1; chan<CHANSIZE;chan++){
        en_stat[chan] = en_stat[0] + 3*chan;//3 energy statistics per channel
    }
    //n = n_input;
    //int numWin = 1 + (n-WINDOWSIZE)/windowStep;


    //svm


    struct svm_model **seizmodels = svm_load_models(model_basename, CHANSIZE);
    //printf("Model Created\n");



    //Postprocess

///Smooth Decisions / Major Votes



    double* outlier_threshold = new double[CHANSIZE];  // read threshold from file
    double* maj_weights = new double[CHANSIZE];
    int adaptive_rate = read_model_params(params_filename,outlier_threshold,maj_weights, CHANSIZE);   //read adaptive_rate from file
    //printf("adaptive rate\n");

    int *alarm_sequence = new int[CHANSIZE];
    sliding_array <double> outlier_sequence(CHANSIZE,adaptive_rate);
    sliding_array <int> novelty_sequence(CHANSIZE,adaptive_rate);
    //printf("Data Allocated\n");



    clock_t begin, end;
    double time_spent;


    begin = clock();


    n = rxdata(newsockfd, buffer, data, WINDOWSIZE);
    //printf("Finished receiving\n");
    weighted_decision = get_window_decision(WINDOWSIZE,CHANSIZE,FilterOrder,NumC,DenC,filtered_data,data,
                                        en_stat,seizmodels,novelty_sequence,outlier_sequence,adaptive_rate,outlier_threshold,
                                        maj_weights,alarm_sequence,WINDOWSIZE);

    printf("Sending Final Decision\n");
    //----------------------------------------------------------------------------
    while (n >= 0) {
        txdata(newsockfd,bufferout,filtered_data,weighted_decision,en_stat[2]);
        // HERE IS WHERE YOU CAN PUT CODE TO WORK ON A WINDOW -----------------------
        end = clock();
        time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
        printf("Time spent on current window: %f seconds\n", time_spent);
        if (n==0){
            break;
        }
        begin = clock();
        update_windows(WinStep,novelty_sequence,outlier_sequence,filtered_data,data);

        // change the offsets
        //printf("Started Receiving");

        bzero(buffer,BUFFERSIZE);

        n = rxdata(newsockfd, buffer, data, offsettime); //receive an offsettime's amount worth of data


        //printf("Rxd first window\n");
        weighted_decision = get_window_decision(WINDOWSIZE,CHANSIZE,FilterOrder,NumC,DenC,filtered_data,data,
                                            en_stat,seizmodels,novelty_sequence,outlier_sequence,adaptive_rate,outlier_threshold,
                                            maj_weights,alarm_sequence, WinStep);
        printf("Sending Final Decision\n");
        //----------------------------------------------------------------------------


    }

    //close connection
    close(newsockfd);
    close(sockfd);
    destroy_pipeline(NumC,DenC,en_stat,seizmodels,novelty_sequence,outlier_sequence,alarm_sequence,
                     maj_weights,outlier_threshold,filtered_data,data, CHANSIZE);

    //free();
//    fftw_free(in);
//    fftw_free(out);
   return 0;
}
